# -*- coding: utf-8 -*-
"""pose-recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14kwZkb8ECmYkw4jeRheS7oCmTKPX1sXF
"""

from sklearn.datasets import load_iris
from sklearn import preprocessing

import pandas as pd

import numpy as np

import math
import operator

from google.colab import drive 
drive.mount('/content/drive')

from sklearn.linear_model import LogisticRegression

data = pd.read_csv('/content/drive/My Drive/dataset/output.csv')
X=[]
Y=[]
for d in range(len(data)):
     dataset = data.iloc[d]
     X_s=dataset[:36]
     Y_s = dataset[36]
     X.append(X_s)
     Y.append(Y_s)
print (np.shape(X))
print(np.shape(Y))

from sklearn import metrics

logreg = LogisticRegression()

# fit the model with data
logreg.fit(X, Y)

# predict the response values for the observations in X
logreg.predict(X)

y_pred = logreg.predict(X)

# check how many predictions were generated
len(y_pred)

print(metrics.accuracy_score(Y, y_pred))

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X, Y)
y_pred = knn.predict(X)
print(metrics.accuracy_score(Y, y_pred))

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.4, random_state=4)

logreg = LogisticRegression()
logreg.fit(X_train, y_train)

y_pred = logreg.predict(X_test)

# compare actual response values (y_test) with predicted response values (y_pred)
print(metrics.accuracy_score(y_test, y_pred))

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print(metrics.accuracy_score(y_test, y_pred))

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print(metrics.accuracy_score(y_test, y_pred))

k_range = range(1, 26)

# We can create Python dictionary using [] or dict()
scores = []

# We use a loop through the range 1 to 26
# We append the scores in the dictionary
for k in k_range:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    y_pred = knn.predict(X_test)
    scores.append(metrics.accuracy_score(y_test, y_pred))

print(scores)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt

# allow plots to appear within the notebook
# %matplotlib inline

# plot the relationship between K and testing accuracy
# plt.plot(x_axis, y_axis)
plt.plot(k_range, scores)
plt.xlabel('Value of K for KNN')
plt.ylabel('Testing Accuracy')

from sklearn.model_selection import cross_val_score
knn = KNeighborsClassifier(n_neighbors=5)
scores = cross_val_score(knn, X, Y, cv=10, scoring='accuracy')
print(scores)

k_range = range(1, 31)
# empty list to store scores
k_scores = []

# 1. we will loop through reasonable values of k
for k in k_range:
    # 2. run KNeighborsClassifier with k neighbours
    knn = KNeighborsClassifier(n_neighbors=k)
    # 3. obtain cross_val_score for KNeighborsClassifier with k neighbours
    scores = cross_val_score(knn, X, Y, cv=10, scoring='accuracy')
    # 4. append mean of scores for k neighbors to k_scores list
    k_scores.append(scores.mean())


print(k_scores)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

# plot the value of K for KNN (x-axis) versus the cross-validated accuracy (y-axis)
# plt.plot(x_axis, y_axis)
plt.plot(k_range, k_scores)
plt.xlabel('Value of K for KNN')
plt.ylabel('Cross-validated accuracy')